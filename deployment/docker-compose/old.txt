version: '3.4'


services:

    #######################################################
    #  Reverse-Proxy
    #######################################################
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "3000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - rabbitmq
      - authentication
      - notification
    networks:
      - backend_network


    #######################################################
    #  Rabbitmq
    #######################################################
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672"
      - "15672"
    networks:
      - backend_network

    #######################################################
    #  Authentication
    #######################################################
  authentication:
    image: authentication
    container_name: authentication
    restart: unless-stopped
    ports:
      - "3000"
    networks:
      - backend_network
    depends_on:
      - rabbitmq


    #######################################################
    #  Notification
    #######################################################
  notification:
    image: notification
    container_name: notification
    restart: unless-stopped
    ports:
      - "3005"
    networks:
      - backend_network
    depends_on:
      - rabbitmq

  
networks:
  backend_network:
    driver: bridge

//-------

version: '3.4'


services:

    #######################################################
    #  Reverse-Proxy
    #######################################################
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - rabbitmq
      - authentication
      - notification
    networks:
      - backend_network


    #######################################################
    #  Rabbitmq
    #######################################################
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672"
      - "15672"
    networks:
      - backend_network

    #######################################################
    #  Authentication
    #######################################################
  authentication:
    image: authentication
    container_name: authentication
    restart: unless-stopped
    ports:
      - "3000"
    networks:
      - backend_network
    depends_on:
      - rabbitmq


    #######################################################
    #  Notification
    #######################################################
  notification:
    image: notification
    container_name: notification
    restart: unless-stopped
    ports:
      - "3005"
    networks:
      - backend_network
    depends_on:
      - rabbitmq

  
networks:
  backend_network:
    driver: bridge




docker-compose ve ngnix kullanarak localhostdaki servisleri
backend servisleri (rabbitmq:5672 notification:3005 ve authentication:3000) api.craft.com altında
frontend servisleri (client) craft.com üzerinden çalışacak şekilde yapılandırır mısın


events {}

http {
  upstream authentication {
    server authentication:3000;
  }

  upstream notification {
    server notification:3005;
  }

  upstream client {
    server client:3002;
  }


  server {
    listen 80;
    server_name craft.com;

    location /auth {
      proxy_pass http://authentication/auth;
    }

    location /user {
      proxy_pass http://authentication/user;
    }

    location /notification {
      proxy_pass http://notification/test;
    }

    location / {
      proxy_pass http://client;
    }

  }

  server {
    listen: 80;
    server_name craft.com;

    location / {
      proxy_pass http://client;
    }
  }
}




openssl rsa -in key.pem -out newkey.pem bu kod newKey adında pem dosyası oluştururken bu kod ssl_password_file /etc/nginx/ssl/password.txt password adında txt dosyası okuyor bir hata yok mu





ngnix.conf:
http {
  upstream authentication {
    server authentication:3000;
  }

  upstream notification {
    server notification:3005;
  }

  upstream client {
    server client:3002;
  }


  server {
    listen 80;

    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_password_file /etc/nginx/ssl/password.txt;
    
    location /auth {
      proxy_pass http://authentication/auth;
    }

    location /user {
      proxy_pass http://authentication/user;
    }

    location /notification {
      proxy_pass http://notification/test;
    }

    location / {
      proxy_pass http://client;
    }
  }
}

version: '3.4'

docker-dompose.yaml:
services:

    #######################################################
    #  Reverse-Proxy
    #######################################################
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "3000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - rabbitmq
      - authentication
      - notification
    networks:
      - backend_network




    #######################################################
    #  Rabbitmq
    #######################################################
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672"
      - "15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend_network

    #######################################################
    #  Authentication
    #######################################################
  authentication:
    image: authentication
    container_name: authentication
    restart: unless-stopped
    ports:
      - "3000"
    networks:
      - backend_network
    depends_on:
      - rabbitmq


    #######################################################
    #  Notification
    #######################################################
  notification:
    image: notification
    container_name: notification
    restart: unless-stopped
    ports:
      - "3005"
    networks:
      - backend_network
    depends_on:
      - rabbitmq

  client:
    image: client
    container_name: client
    restart: unless-stopped
    ports:
      - "3002"
    networks:
      - backend_network
        
networks:
  backend_network:
    driver: bridge

volumes:
  rabbitmq_data:
  
I have an authentication service with passportjs and it works, but when I stand up the project with docker-compose and ngnix, it gives google Access blocked: Authorization Error error (I also configured ngnix ssl and it works) The callback urls running locally and running with ngnix are the same


Passportjs ile bir kimlik doğrulama servisim var ve çalışıyor fakat projeyi docker-compose ve ngnix ile ayağa kaldırdığımda google 

Access blocked: Authorization Error

You can't sign in to this app because it doesn't comply with Google's OAuth 2.0 policy for keeping apps secure.

You can let the app developer know that this app doesn't comply with one or more Google validation rules.
Learn more about this error
If you are a developer of auth_service, see error details.
Error 400: invalid_request

hatası veriyor (ngnix ssl'i de yapılandırdım ve çalışıyor) Yerel olarak çalışan ve ngnix ile çalışan callback url'leri aynı




GOOGLE_CLIENT_ID = 992635326413-33olbn2le1m22o100uf9m4tu37t5b6n1.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET = 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


GOOGLE_CLIENT_ID = 992635326413-rsb6e254cmna7a943mpd96fki4ji2t9e.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET = 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